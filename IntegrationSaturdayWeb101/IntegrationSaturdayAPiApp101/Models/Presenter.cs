// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace IntegrationSaturdayWeb101.Models
{
    public partial class Presenter
    {
        private string _emailAddress;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string EmailAddress
        {
            get { return this._emailAddress; }
            set { this._emailAddress = value; }
        }
        
        private int? _id;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private IList<string> _sessions;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<string> Sessions
        {
            get { return this._sessions; }
            set { this._sessions = value; }
        }
        
        private string _twiterHandle;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string TwiterHandle
        {
            get { return this._twiterHandle; }
            set { this._twiterHandle = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Presenter class.
        /// </summary>
        public Presenter()
        {
            this.Sessions = new LazyList<string>();
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken emailAddressValue = inputObject["EmailAddress"];
                if (emailAddressValue != null && emailAddressValue.Type != JTokenType.Null)
                {
                    this.EmailAddress = ((string)emailAddressValue);
                }
                JToken idValue = inputObject["Id"];
                if (idValue != null && idValue.Type != JTokenType.Null)
                {
                    this.Id = ((int)idValue);
                }
                JToken nameValue = inputObject["Name"];
                if (nameValue != null && nameValue.Type != JTokenType.Null)
                {
                    this.Name = ((string)nameValue);
                }
                JToken sessionsSequence = ((JToken)inputObject["Sessions"]);
                if (sessionsSequence != null && sessionsSequence.Type != JTokenType.Null)
                {
                    foreach (JToken sessionsValue in ((JArray)sessionsSequence))
                    {
                        this.Sessions.Add(((string)sessionsValue));
                    }
                }
                JToken twiterHandleValue = inputObject["TwiterHandle"];
                if (twiterHandleValue != null && twiterHandleValue.Type != JTokenType.Null)
                {
                    this.TwiterHandle = ((string)twiterHandleValue);
                }
            }
        }
    }
}
